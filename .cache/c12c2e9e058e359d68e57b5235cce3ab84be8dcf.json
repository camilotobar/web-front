{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{}},{"key":"base$0$3","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/home/camilo/Documents/Web Programming/Vue Apps/LearnU/node_modules/vue-numeric/src/vue-numeric.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","dynamicImport",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"/home/camilo/Documents/Web Programming/Vue Apps/LearnU/node_modules/vue-numeric/src/vue-numeric.vue","filename":"/home/camilo/Documents/Web Programming/Vue Apps/LearnU/node_modules/vue-numeric/src/vue-numeric.vue","passPerPreset":false,"envName":"development","cwd":"/home/camilo/Documents/Web Programming/Vue Apps/LearnU","root":"/home/camilo/Documents/Web Programming/Vue Apps/LearnU","generatorOpts":{"filename":"/home/camilo/Documents/Web Programming/Vue Apps/LearnU/node_modules/vue-numeric/src/vue-numeric.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/home/camilo/Documents/Web Programming/Vue Apps/LearnU/node_modules/vue-numeric/src/vue-numeric.vue"}},"code":"var accounting;\nmodule.link(\"accounting-js\", {\n  \"default\": function (v) {\n    accounting = v;\n  }\n}, 0);\nmodule.exportDefault({\n  name: 'VueNumeric',\n  props: {\n    /**\r\n     * Currency symbol.\r\n     */\n    currency: {\n      type: String,\n      \"default\": '',\n      required: false\n    },\n\n    /**\r\n     * Maximum value allowed.\r\n     */\n    max: {\n      type: Number,\n      \"default\": Number.MAX_SAFE_INTEGER || 9007199254740991,\n      required: false\n    },\n\n    /**\r\n     * Minimum value allowed.\r\n     */\n    min: {\n      type: Number,\n      \"default\": Number.MIN_SAFE_INTEGER || -9007199254740991,\n      required: false\n    },\n\n    /**\r\n     * Enable/Disable minus value.\r\n     */\n    minus: {\n      type: Boolean,\n      \"default\": false,\n      required: false\n    },\n\n    /**\r\n     * Input placeholder.\r\n     */\n    placeholder: {\n      type: String,\n      \"default\": '',\n      required: false\n    },\n\n    /**\r\n     * Value when the input is empty\r\n     */\n    emptyValue: {\n      type: [Number, String],\n      \"default\": '',\n      required: false\n    },\n\n    /**\r\n     * Number of decimals.\r\n     * Decimals symbol are the opposite of separator symbol.\r\n     */\n    precision: {\n      type: Number,\n      \"default\": 0,\n      required: false\n    },\n\n    /**\r\n     * Thousand separator type.\r\n     * Separator props accept either . or , (default).\r\n     */\n    separator: {\n      type: String,\n      \"default\": ',',\n      required: false\n    },\n\n    /**\r\n     * Forced thousand separator.\r\n     * Accepts any string.\r\n     */\n    thousandSeparator: {\n      \"default\": undefined,\n      required: false,\n      type: String\n    },\n\n    /**\r\n     * Forced decimal separator.\r\n     * Accepts any string.\r\n     */\n    decimalSeparator: {\n      \"default\": undefined,\n      required: false,\n      type: String\n    },\n\n    /**\r\n      * The output type used for v-model.\r\n      * It can either be String or Number (default).\r\n      */\n    outputType: {\n      required: false,\n      type: String,\n      \"default\": 'Number'\n    },\n\n    /**\r\n     * v-model value.\r\n     */\n    value: {\n      type: [Number, String],\n      \"default\": 0,\n      required: true\n    },\n\n    /**\r\n     * Hide input and show value in text only.\r\n     */\n    readOnly: {\n      type: Boolean,\n      \"default\": false,\n      required: false\n    },\n\n    /**\r\n     * Class for the span tag when readOnly props is true.\r\n     */\n    readOnlyClass: {\n      type: String,\n      \"default\": '',\n      required: false\n    },\n\n    /**\r\n     * Position of currency symbol\r\n     * Symbol position props accept either 'suffix' or 'prefix' (default).\r\n     */\n    currencySymbolPosition: {\n      type: String,\n      \"default\": 'prefix',\n      required: false\n    }\n  },\n  data: function () {\n    return {\n      amount: ''\n    };\n  },\n  computed: {\n    /**\r\n     * Number type of formatted value.\r\n     * @return {Number}\r\n     */\n    amountNumber: function () {\n      return this.unformat(this.amount);\n    },\n\n    /**\r\n     * Number type of value props.\r\n     * @return {Number}\r\n     */\n    valueNumber: function () {\n      return this.unformat(this.value);\n    },\n\n    /**\r\n     * Define decimal separator based on separator props.\r\n     * @return {String} '.' or ','\r\n     */\n    decimalSeparatorSymbol: function () {\n      if (typeof this.decimalSeparator !== 'undefined') return this.decimalSeparator;\n      if (this.separator === ',') return '.';\n      return ',';\n    },\n\n    /**\r\n     * Define thousand separator based on separator props.\r\n     * @return {String} '.' or ','\r\n     */\n    thousandSeparatorSymbol: function () {\n      if (typeof this.thousandSeparator !== 'undefined') return this.thousandSeparator;\n      if (this.separator === '.') return '.';\n      if (this.separator === 'space') return ' ';\n      return ',';\n    },\n\n    /**\r\n     * Define format position for currency symbol and value.\r\n     * @return {String} format\r\n     */\n    symbolPosition: function () {\n      if (!this.currency) return '%v';\n      return this.currencySymbolPosition === 'suffix' ? '%v %s' : '%s %v';\n    }\n  },\n  watch: {\n    /**\r\n     * Watch for value change from other input with same v-model.\r\n     * @param {Number} newValue\r\n     */\n    valueNumber: function (newValue) {\n      if (this.$refs.numeric !== document.activeElement) {\n        this.amount = this.format(newValue);\n      }\n    },\n\n    /**\r\n     * When readOnly is true, replace the span tag class.\r\n     * @param {Boolean} newValue\r\n     * @param {Boolean} oldValue\r\n     */\n    readOnly: function (newValue, oldValue) {\n      var _this = this;\n\n      if (oldValue === false && newValue === true) {\n        this.$nextTick(function () {\n          _this.$refs.readOnly.className = _this.readOnlyClass;\n        });\n      }\n    },\n\n    /**\r\n     * Immediately reflect separator changes\r\n     */\n    separator: function () {\n      this.process(this.valueNumber);\n      this.amount = this.format(this.valueNumber);\n    },\n\n    /**\r\n     * Immediately reflect currency changes\r\n     */\n    currency: function () {\n      this.process(this.valueNumber);\n      this.amount = this.format(this.valueNumber);\n    },\n\n    /**\r\n     * Immediately reflect precision changes\r\n     */\n    precision: function () {\n      this.process(this.valueNumber);\n      this.amount = this.format(this.valueNumber);\n    }\n  },\n  mounted: function () {\n    var _this2 = this;\n\n    // Set default value props when placeholder undefined.\n    if (!this.placeholder) {\n      this.process(this.valueNumber);\n      this.amount = this.format(this.valueNumber); // In case of delayed props value.\n\n      setTimeout(function () {\n        _this2.process(_this2.valueNumber);\n\n        _this2.amount = _this2.format(_this2.valueNumber);\n      }, 500);\n    } // Set read-only span element's class\n\n\n    if (this.readOnly) this.$refs.readOnly.className = this.readOnlyClass;\n  },\n  methods: {\n    /**\r\n     * Handle blur event.\r\n     * @param {Object} e\r\n     */\n    onBlurHandler: function (e) {\n      this.$emit('blur', e);\n      this.amount = this.format(this.valueNumber);\n    },\n\n    /**\r\n     * Handle focus event.\r\n     * @param {Object} e\r\n     */\n    onFocusHandler: function (e) {\n      this.$emit('focus', e);\n\n      if (this.valueNumber === 0) {\n        this.amount = null;\n      } else {\n        this.amount = accounting.formatMoney(this.valueNumber, {\n          symbol: '',\n          format: '%v',\n          thousand: '',\n          decimal: this.decimalSeparatorSymbol,\n          precision: Number(this.precision)\n        });\n      }\n    },\n\n    /**\r\n     * Handle input event.\r\n     */\n    onInputHandler: function () {\n      this.process(this.amountNumber);\n    },\n\n    /**\r\n     * Validate value before update the component.\r\n     * @param {Number} value\r\n     */\n    process: function (value) {\n      if (value >= this.max) this.update(this.max);\n      if (value <= this.min) this.update(this.min);\n      if (value > this.min && value < this.max) this.update(value);\n      if (!this.minus && value < 0) this.min >= 0 ? this.update(this.min) : this.update(0);\n    },\n\n    /**\r\n     * Update parent component model value.\r\n     * @param {Number} value\r\n     */\n    update: function (value) {\n      var fixedValue = accounting.toFixed(value, this.precision);\n      var output = this.outputType.toLowerCase() === 'string' ? fixedValue : Number(fixedValue);\n      this.$emit('input', output);\n    },\n\n    /**\r\n     * Format value using symbol and separator.\r\n     * @param {Number} value\r\n     * @return {String}\r\n     */\n    format: function (value) {\n      return accounting.formatMoney(value, {\n        symbol: this.currency,\n        format: this.symbolPosition,\n        precision: Number(this.precision),\n        decimal: this.decimalSeparatorSymbol,\n        thousand: this.thousandSeparatorSymbol\n      });\n    },\n\n    /**\r\n     * Remove symbol and separator.\r\n     * @param {Number} value\r\n     * @return {Number}\r\n     */\n    unformat: function (value) {\n      var toUnformat = typeof value === 'string' && value === '' ? this.emptyValue : value;\n      return accounting.unformat(toUnformat, this.decimalSeparatorSymbol);\n    }\n  }\n});","map":{"version":3,"sources":["/home/camilo/Documents/Web Programming/Vue Apps/LearnU/node_modules/vue-numeric/src/vue-numeric.vue"],"names":["accounting","module","link","v","exportDefault","name","props","currency","type","String","required","max","Number","MAX_SAFE_INTEGER","min","MIN_SAFE_INTEGER","minus","Boolean","placeholder","emptyValue","precision","separator","thousandSeparator","undefined","decimalSeparator","outputType","value","readOnly","readOnlyClass","currencySymbolPosition","data","amount","computed","amountNumber","unformat","valueNumber","decimalSeparatorSymbol","thousandSeparatorSymbol","symbolPosition","watch","newValue","$refs","numeric","document","activeElement","format","oldValue","$nextTick","className","process","mounted","setTimeout","methods","onBlurHandler","e","$emit","onFocusHandler","formatMoney","symbol","thousand","decimal","onInputHandler","update","fixedValue","toFixed","output","toLowerCase","toUnformat"],"mappings":"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","sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport accounting from 'accounting-js'\r\n\r\nexport default {\r\n  name: 'VueNumeric',\r\n\r\n  props: {\r\n    /**\r\n     * Currency symbol.\r\n     */\r\n    currency: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n\r\n    /**\r\n     * Maximum value allowed.\r\n     */\r\n    max: {\r\n      type: Number,\r\n      default: Number.MAX_SAFE_INTEGER || 9007199254740991,\r\n      required: false,\r\n    },\r\n\r\n    /**\r\n     * Minimum value allowed.\r\n     */\r\n    min: {\r\n      type: Number,\r\n      default: Number.MIN_SAFE_INTEGER || -9007199254740991,\r\n      required: false\r\n    },\r\n\r\n    /**\r\n     * Enable/Disable minus value.\r\n     */\r\n    minus: {\r\n      type: Boolean,\r\n      default: false,\r\n      required: false\r\n    },\r\n\r\n    /**\r\n     * Input placeholder.\r\n     */\r\n    placeholder: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n\r\n    /**\r\n     * Value when the input is empty\r\n     */\r\n    emptyValue: {\r\n      type: [Number, String],\r\n      default: '',\r\n      required: false\r\n    },\r\n\r\n    /**\r\n     * Number of decimals.\r\n     * Decimals symbol are the opposite of separator symbol.\r\n     */\r\n    precision: {\r\n      type: Number,\r\n      default: 0,\r\n      required: false\r\n    },\r\n\r\n    /**\r\n     * Thousand separator type.\r\n     * Separator props accept either . or , (default).\r\n     */\r\n    separator: {\r\n      type: String,\r\n      default: ',',\r\n      required: false\r\n    },\r\n\r\n    /**\r\n     * Forced thousand separator.\r\n     * Accepts any string.\r\n     */\r\n    thousandSeparator: {\r\n      default: undefined,\r\n      required: false,\r\n      type: String\r\n    },\r\n\r\n    /**\r\n     * Forced decimal separator.\r\n     * Accepts any string.\r\n     */\r\n    decimalSeparator: {\r\n      default: undefined,\r\n      required: false,\r\n      type: String\r\n    },\r\n\r\n    /**\r\n      * The output type used for v-model.\r\n      * It can either be String or Number (default).\r\n      */\r\n    outputType: {\r\n      required: false,\r\n        type: String,\r\n        default: 'Number'\r\n    },\r\n\r\n    /**\r\n     * v-model value.\r\n     */\r\n    value: {\r\n      type: [Number, String],\r\n      default: 0,\r\n      required: true\r\n    },\r\n\r\n    /**\r\n     * Hide input and show value in text only.\r\n     */\r\n    readOnly: {\r\n      type: Boolean,\r\n      default: false,\r\n      required: false\r\n    },\r\n\r\n    /**\r\n     * Class for the span tag when readOnly props is true.\r\n     */\r\n    readOnlyClass: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n\r\n    /**\r\n     * Position of currency symbol\r\n     * Symbol position props accept either 'suffix' or 'prefix' (default).\r\n     */\r\n    currencySymbolPosition: {\r\n      type: String,\r\n      default: 'prefix',\r\n      required: false\r\n    }\r\n  },\r\n\r\n  data: () => ({\r\n    amount: ''\r\n  }),\r\n\r\n  computed: {\r\n    /**\r\n     * Number type of formatted value.\r\n     * @return {Number}\r\n     */\r\n    amountNumber () {\r\n      return this.unformat(this.amount)\r\n    },\r\n\r\n    /**\r\n     * Number type of value props.\r\n     * @return {Number}\r\n     */\r\n    valueNumber () {\r\n      return this.unformat(this.value)\r\n    },\r\n\r\n    /**\r\n     * Define decimal separator based on separator props.\r\n     * @return {String} '.' or ','\r\n     */\r\n    decimalSeparatorSymbol () {\r\n      if (typeof this.decimalSeparator !== 'undefined') return this.decimalSeparator\r\n      if (this.separator === ',') return '.'\r\n      return ','\r\n    },\r\n\r\n    /**\r\n     * Define thousand separator based on separator props.\r\n     * @return {String} '.' or ','\r\n     */\r\n    thousandSeparatorSymbol () {\r\n      if (typeof this.thousandSeparator !== 'undefined') return this.thousandSeparator\r\n      if (this.separator === '.') return '.'\r\n      if (this.separator === 'space') return ' '\r\n      return ','\r\n    },\r\n\r\n    /**\r\n     * Define format position for currency symbol and value.\r\n     * @return {String} format\r\n     */\r\n    symbolPosition () {\r\n      if (!this.currency) return '%v'\r\n      return this.currencySymbolPosition === 'suffix' ? '%v %s' : '%s %v'\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    /**\r\n     * Watch for value change from other input with same v-model.\r\n     * @param {Number} newValue\r\n     */\r\n    valueNumber (newValue) {\r\n      if (this.$refs.numeric !== document.activeElement) {\r\n        this.amount = this.format(newValue)\r\n      }\r\n    },\r\n\r\n    /**\r\n     * When readOnly is true, replace the span tag class.\r\n     * @param {Boolean} newValue\r\n     * @param {Boolean} oldValue\r\n     */\r\n    readOnly (newValue, oldValue) {\r\n      if (oldValue === false && newValue === true) {\r\n        this.$nextTick(() => {\r\n          this.$refs.readOnly.className = this.readOnlyClass\r\n        })\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Immediately reflect separator changes\r\n     */\r\n    separator () {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n    },\r\n\r\n    /**\r\n     * Immediately reflect currency changes\r\n     */\r\n    currency () {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n    },\r\n\r\n    /**\r\n     * Immediately reflect precision changes\r\n     */\r\n    precision () {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    // Set default value props when placeholder undefined.\r\n    if (!this.placeholder) {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n\r\n      // In case of delayed props value.\r\n      setTimeout(() => {\r\n        this.process(this.valueNumber)\r\n        this.amount = this.format(this.valueNumber)\r\n      }, 500)\r\n    }\r\n\r\n    // Set read-only span element's class\r\n    if (this.readOnly) this.$refs.readOnly.className = this.readOnlyClass\r\n  },\r\n\r\n  methods: {\r\n    /**\r\n     * Handle blur event.\r\n     * @param {Object} e\r\n     */\r\n    onBlurHandler (e) {\r\n      this.$emit('blur', e)\r\n      this.amount = this.format(this.valueNumber)\r\n    },\r\n\r\n    /**\r\n     * Handle focus event.\r\n     * @param {Object} e\r\n     */\r\n    onFocusHandler (e) {\r\n      this.$emit('focus', e)\r\n      if (this.valueNumber === 0) {\r\n        this.amount = null\r\n      } else {\r\n        this.amount = accounting.formatMoney(this.valueNumber, {\r\n          symbol: '',\r\n          format: '%v',\r\n          thousand: '',\r\n          decimal: this.decimalSeparatorSymbol,\r\n          precision: Number(this.precision)\r\n        })\r\n      }\r\n    },\r\n\r\n    /**\r\n     * Handle input event.\r\n     */\r\n    onInputHandler () {\r\n      this.process(this.amountNumber)\r\n    },\r\n\r\n    /**\r\n     * Validate value before update the component.\r\n     * @param {Number} value\r\n     */\r\n    process (value) {\r\n      if (value >= this.max) this.update(this.max)\r\n      if (value <= this.min) this.update(this.min)\r\n      if (value > this.min && value < this.max) this.update(value)\r\n      if (!this.minus && value < 0) this.min >= 0 ? this.update(this.min) : this.update(0)\r\n    },\r\n\r\n    /**\r\n     * Update parent component model value.\r\n     * @param {Number} value\r\n     */\r\n    update (value) {\r\n      const fixedValue = accounting.toFixed(value, this.precision)\r\n      const output = this.outputType.toLowerCase() === 'string' ? fixedValue : Number(fixedValue)\r\n      this.$emit('input', output)\r\n    },\r\n\r\n    /**\r\n     * Format value using symbol and separator.\r\n     * @param {Number} value\r\n     * @return {String}\r\n     */\r\n    format (value) {\r\n      return accounting.formatMoney(value, {\r\n        symbol: this.currency,\r\n        format: this.symbolPosition,\r\n        precision: Number(this.precision),\r\n        decimal: this.decimalSeparatorSymbol,\r\n        thousand: this.thousandSeparatorSymbol\r\n      })\r\n    },\r\n\r\n    /**\r\n     * Remove symbol and separator.\r\n     * @param {Number} value\r\n     * @return {Number}\r\n     */\r\n    unformat (value) {\r\n      const toUnformat = typeof value === 'string' && value === '' ? this.emptyValue : value\r\n      return accounting.unformat(toUnformat, this.decimalSeparatorSymbol)\r\n    }\r\n  }\r\n}\r\n"]},"sourceType":"script","hash":"c12c2e9e058e359d68e57b5235cce3ab84be8dcf"}
